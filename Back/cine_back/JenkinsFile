pipeline {
    agent any

    tools {
        gradle 'GRADLE'
    }

    stages {
        stage('Clone and Checkout Latest Commit') {
            steps {
                git branch: 'develop', url: 'https://github.com/Jd1ego/EstudioCine'
                sh 'git fetch --all'
                sh 'git reset --hard origin/develop'
            }
        }

        stage('Set Permissions') {
            steps {
                dir('Back/cine_back') {
                    sh 'chmod +x gradlew'
                }
            }
        }

        stage('Build') {
            steps {
                dir('Back/cine_back') {
                    sh './gradlew clean build -x test'
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('Back/cine_back') {
                    sh './gradlew test'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {

                withSonarQubeEnv('sonarqube') {
                    dir('Back/cine_back') {
                        sh './gradlew sonar -Dsonar.login=squ_12588c140fc2012b9317233038f6c837974b92fd'
                    }
                }
            }
        }

        stage('Sonar Quality Gate') {
            steps {
                script {

                    def qualityGateResult = waitForQualityGate()
                    if (qualityGateResult.status != 'OK') {
                        error "Quality Gate failed: ${qualityGateResult.status}"
                    }
                }
            }
        }
    }

    post {
        always {
            junit '**/build/test-results/test/*.xml'
        }
        success {
                    githubNotify context: 'build', status: 'SUCCESS', description: 'Build successful'
                }
                failure {
                    githubNotify context: 'build', status: 'FAILURE', description: 'Build failed'
                }
            }
    }

